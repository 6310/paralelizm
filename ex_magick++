#include "stdafx.h"
#include <iostream>
#include <stdio.h>
#include <omp.h>
#include <stdlib.h>
#include <chrono>//tempo

using namespace std;
using  ms = chrono::microseconds;
using get_time = chrono::steady_clock;

#define TRHEADCOUNT 80
#define ARRTAM 20000

int main()
{	

	//Teste de startup-----------------------------------------------------------------
	int num_thds, myid;
	omp_set_num_threads(TRHEADCOUNT);
#pragma omp parallel
	{
		num_thds = omp_get_num_threads(); //threads criados
		myid = omp_get_thread_num(); //Numero de identificação do thread
		printf(" Hello world do thd no: %d de %d trheads!\n", myid, (num_thds - 1));
	}
	//Fim do teste de startup----------------------------------------------------------

	int i;
	double *A, *B, *C;

	//Aloca e inicializa arrays
	A = (double *)malloc(ARRTAM * sizeof(double));
	B = (double *)malloc(ARRTAM * sizeof(double));
	C = (double *)malloc(ARRTAM * sizeof(double));

	//Adicionar dados nos arrays
	for (i = 0; i < ARRTAM; i++)
	{
		A[i] = i * 2;
		B[i] = i * 2;
	}

	auto start = get_time::now(); //contagem do tempo
	//---------------------------------------------------------------------------------
#pragma omp parallel for default(none) shared(A,B,C)
	for (i = 0; i < ARRTAM; i++)
	{
		C[i] = A[i] + B[i];
	}

	/*printa
	printf("\n Vetores trabalhados: \n");
	for (i = 0; i < ARRTAM; i++)
	{
		printf("\t %f  +  %f  =  %f\n", A[i], B[i], C[i]);
	}
	*/
	free(A);
	free(B);
	free(C);



	//---------------------------------------------------------------------------------
	auto end = get_time::now();//contagem do tempo
	auto diff = end - start;
	cout << "Tempo passado  de:  " << chrono::duration_cast<ms>(diff).count() << " ms " << endl;

	printf("Tudo feito\n");
	system("PAUSE");
    return 0;
}

